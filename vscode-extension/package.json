{
  "name": "concept-design-tools",
  "displayName": "Concept Design Tools",
  "description": "Development tools for Concept Design applications - linting, validation, schema generation, and code generation",
  "version": "0.1.5",
  "publisher": "concept-design",
  "engines": {
    "vscode": "^1.85.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sonnenreich/concept"
  },
  "license": "MIT",
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters",
    "Other"
  ],
  "keywords": [
    "concept-design",
    "modular-programming",
    "synchronization",
    "typescript",
    "prisma"
  ],
  "activationEvents": [
    "workspaceContains:**/*.concept",
    "workspaceContains:**/*.sync",
    "onLanguage:concept",
    "onLanguage:sync"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "languages": [
      {
        "id": "concept",
        "aliases": ["Concept Specification", "concept"],
        "extensions": [".concept"],
        "configuration": "./language-configuration.json"
      },
      {
        "id": "sync",
        "aliases": ["Sync Specification", "sync"],
        "extensions": [".sync"],
        "configuration": "./language-configuration.json"
      }
    ],
    "grammars": [
      {
        "language": "concept",
        "scopeName": "source.concept",
        "path": "./syntaxes/concept.tmLanguage.json"
      },
      {
        "language": "sync",
        "scopeName": "source.sync", 
        "path": "./syntaxes/sync.tmLanguage.json"
      }
    ],
    "commands": [
      {
        "command": "concept-design.syncSchema",
        "title": "Sync Prisma Schema with Concepts",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.generateSchema",
        "title": "Generate Prisma Schema (Legacy)",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.validateConcepts",
        "title": "Validate Concept Alignment",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.validateConceptsWithAI",
        "title": "Validate Concept Alignment (with AI)",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.generateCode",
        "title": "Generate TypeScript Code",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.openValidationReport",
        "title": "Open Last Validation Report",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.generateCursorRules",
        "title": "Generate AI Rules",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.testExtension",
        "title": "Test Extension (No Linting)",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.toggleSyntaxHighlighting",
        "title": "Toggle Syntax Highlighting",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.toggleSyntaxSafeMode",
        "title": "Toggle Safe Syntax Highlighting",
        "category": "Concept Design"
      },
      {
        "command": "concept-design.validateConceptSpecs",
        "title": "Validate Concept Specifications",
        "category": "Concept Design Validation"
      },
      {
        "command": "concept-design.validateSyncSpecs",
        "title": "Validate Sync Specifications",
        "category": "Concept Design Validation"
      },
      {
        "command": "concept-design.validateConceptImplementation",
        "title": "Validate Concept Implementation",
        "category": "Concept Design Validation"
      },
      {
        "command": "concept-design.validateSyncImplementation",
        "title": "Validate Sync Implementation",
        "category": "Concept Design Validation"
      },
      {
        "command": "concept-design.validateFramework",
        "title": "Validate Framework",
        "category": "Concept Design Validation"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "concept-design.generateSchema",
          "when": "explorerResourceIsFolder",
          "group": "concept-design@1"
        },
        {
          "command": "concept-design.validateConcepts",
          "when": "explorerResourceIsFolder",
          "group": "concept-design@2"
        },
        {
          "command": "concept-design.generateCode",
          "when": "explorerResourceIsFolder",
          "group": "concept-design@3"
        },
        {
          "command": "concept-design.validateFramework",
          "when": "explorerResourceIsFolder",
          "group": "concept-design-validation@1"
        },
        {
          "command": "concept-design.validateConceptSpecs",
          "when": "explorerResourceIsFolder",
          "group": "concept-design-validation@2"
        },
        {
          "command": "concept-design.validateConceptImplementation",
          "when": "explorerResourceIsFolder",
          "group": "concept-design-validation@3"
        }
      ],
      "editor/context": [
        {
          "command": "concept-design.validateConcepts",
          "when": "resourceExtname == .concept || resourceExtname == .sync",
          "group": "concept-design@1"
        }
      ],
      "commandPalette": [
        {
          "command": "concept-design.generateSchema",
          "when": "workspaceContains:**/*.concept"
        },
        {
          "command": "concept-design.validateConcepts",
          "when": "workspaceContains:**/*.concept"
        },
        {
          "command": "concept-design.validateConceptsWithAI",
          "when": "workspaceContains:**/*.concept"
        },
        {
          "command": "concept-design.generateCode",
          "when": "workspaceContains:**/*.concept"
        },
        {
          "command": "concept-design.validateConceptSpecs",
          "when": "workspaceContains:**/*.concept"
        },
        {
          "command": "concept-design.validateSyncSpecs",
          "when": "workspaceContains:**/*.sync || workspaceContains:**/*.ts"
        },
        {
          "command": "concept-design.validateConceptImplementation",
          "when": "workspaceContains:**/*.concept && workspaceContains:**/*.ts"
        },
        {
          "command": "concept-design.validateSyncImplementation",
          "when": "workspaceContains:**/*.sync || workspaceContains:**/*.ts"
        },
        {
          "command": "concept-design.validateFramework",
          "when": "workspaceContains:**/*.concept"
        }
      ]
    },
    "configuration": {
      "type": "object",
      "title": "Concept Design Tools",
      "properties": {
        "conceptDesign.extension.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Master toggle for the entire extension - when disabled, no features will activate"
        },
        "conceptDesign.languages.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable language definitions for .concept and .sync files"
        },
        "conceptDesign.commands.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable command registration (validation, code generation, etc.)"
        },
        "conceptDesign.menus.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable context menus in explorer and editor"
        },
        "conceptDesign.activation.autoTrigger": {
          "type": "boolean",
          "default": true,
          "description": "Automatically activate extension when .concept files are detected"
        },
        "conceptDesign.openai.apiKey": {
          "type": "string",
          "default": "",
          "description": "OpenAI API key for AI-powered features (validation, cursor rules generation)",
          "scope": "application"
        },
        "conceptDesign.openai.model": {
          "type": "string",
          "default": "gpt-4.1",
          "enum": [
            "gpt-4.1",
            "gpt-4.1-mini",
            "gpt-5-mini",
            "gpt-5"
          ],
          "description": "OpenAI model to use for AI-powered features"
        },
        "conceptDesign.directories.specs": {
          "type": "string",
          "default": "specs",
          "description": "Directory containing .concept specification files"
        },
        "conceptDesign.directories.concepts": {
          "type": "string",
          "default": "concepts",
          "description": "Directory containing TypeScript concept implementations"
        },
        "conceptDesign.directories.syncs": {
          "type": "string",
          "default": "syncs",
          "description": "Directory containing synchronization files"
        },
        "conceptDesign.directories.schema": {
          "type": "string",
          "default": "prisma/schema.prisma",
          "description": "Path to generated Prisma schema file"
        },
        "conceptDesign.validation.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable validation features"
        },
        "conceptDesign.validation.strictMode": {
          "type": "boolean",
          "default": true,
          "description": "Enable strict validation mode for more rigorous checking"
        },
        "conceptDesign.validation.includeAIAnalysis": {
          "type": "boolean",
          "default": false,
          "description": "Include AI-powered analysis in validation (requires OpenAI API key)"
        },
        "conceptDesign.codeGeneration.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable code generation features"
        },
        "conceptDesign.codeGeneration.overwriteExisting": {
          "type": "boolean",
          "default": false,
          "description": "Allow overwriting existing TypeScript files during code generation"
        },
        "conceptDesign.codeGeneration.useMongoDb": {
          "type": "boolean",
          "default": false,
          "description": "Generate code for MongoDB instead of PostgreSQL/Prisma"
        },
        "conceptDesign.linting.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable linting and diagnostics features"
        },
        "conceptDesign.linting.enableRealTime": {
          "type": "boolean",
          "default": true,
          "description": "Enable real-time linting and validation for .concept and .sync files"
        },
        "conceptDesign.linting.enableLanguageServer": {
          "type": "boolean",
          "default": true,
          "description": "Enable the language server for diagnostics"
        },
        "conceptDesign.debug.enableLogging": {
          "type": "boolean",
          "default": false,
          "description": "Enable detailed debug logging for troubleshooting"
        },
        "conceptDesign.syntax.enabled": {
          "type": "boolean",
          "default": false,
          "description": "Enable syntax highlighting features"
        },
        "conceptDesign.syntax.enableHighlighting": {
          "type": "boolean",
          "default": false,
          "description": "Enable syntax highlighting for .concept and .sync files (EXPERIMENTAL - may cause crashes)"
        },
        "conceptDesign.syntax.useSafeMode": {
          "type": "boolean",
          "default": true,
          "description": "Use safe syntax highlighting mode with simplified regex patterns to prevent crashes (only applies when syntax highlighting is enabled)"
        },
        "conceptDesign.problemMatchers.enabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable problem matchers for build tasks"
        }
      }
    },
    "problemMatchers": [
      {
        "name": "concept-design",
        "owner": "concept-design",
        "fileLocation": [
          "relative",
          "${workspaceFolder}"
        ],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile",
    "lint": "eslint src --ext ts --fix",
    "lint:check": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js",
    "test:watch": "npm run compile && npm run test",
    "clean": "rimraf out *.vsix",
    "package": "npm run clean && npm run compile && vsce package",
    "install-extension": "npm run package && code --install-extension *.vsix",
    "check": "npm run lint:check && npm run test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "20.x",
    "@types/vscode": "^1.85.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@typescript-eslint/parser": "^8.39.0",
    "@vscode/test-electron": "^2.4.0",
    "eslint": "^9.0.0",
    "fast-glob": "^3.3.2",
    "mocha": "^10.7.0",
    "rimraf": "^6.0.1",
    "typescript": "^5.4.0"
  },
  "dependencies": {
    "openai": "^5.12.2",
    "vscode-languageclient": "^9.0.1",
    "vscode-languageserver": "^9.0.1",
    "vscode-languageserver-textdocument": "^1.0.8"
  }
}
